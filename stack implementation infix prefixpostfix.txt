#include <stdio.h>
#include <ctype.h>
#include <string.h>

#define MAX 100
char stack[MAX]; int top = -1;

void push(char x) { stack[++top] = x; }
char pop() { return stack[top--]; }
int precedence(char x) { return (x == '+' || x == '-') ? 1 : (x == '*' || x == '/') ? 2 : 0; }

void infixToPostfix(char *exp) {
    printf("Postfix: ");
    for (int i = 0; exp[i] != '\0'; i++) {
        if (isalnum(exp[i])) printf("%c", exp[i]);  // If operand, print it
        else if (exp[i] == '(') push(exp[i]);
        else if (exp[i] == ')') {  // Pop till '('
            while (stack[top] != '(') printf("%c", pop());
            pop();
        } else {  // Operator
            while (top != -1 && precedence(stack[top]) >= precedence(exp[i])) printf("%c", pop());
            push(exp[i]);
        }
    }
    while (top != -1) printf("%c", pop());  // Pop all remaining operators
    printf("\n");
}

void reverse(char *exp) {
    int len = strlen(exp);
    for (int i = 0; i < len / 2; i++) {
        char temp = exp[i]; exp[i] = exp[len - i - 1]; exp[len - i - 1] = temp;
    }
}

void infixToPrefix(char *exp) {
    reverse(exp); top = -1;
    printf("Prefix: ");
    for (int i = 0; exp[i] != '\0'; i++) {
        if (isalnum(exp[i])) printf("%c", exp[i]);
        else if (exp[i] == ')') push(exp[i]);
        else if (exp[i] == '(') {
            while (stack[top] != ')') printf("%c", pop());
            pop();
        } else {
            while (top != -1 && precedence(stack[top]) > precedence(exp[i])) printf("%c", pop());
            push(exp[i]);
        }
    }
    while (top != -1) printf("%c", pop());
    reverse(exp); printf("\n");
}

int evaluatePostfix(char *exp) {
    int evalStack[MAX], evalTop = -1;
    for (int i = 0; exp[i] != '\0'; i++) {
        if (isdigit(exp[i])) evalStack[++evalTop] = exp[i] - '0';
        else {
            int b = evalStack[evalTop--], a = evalStack[evalTop--];
            switch (exp[i]) {
                case '+': evalStack[++evalTop] = a + b; break;
                case '-': evalStack[++evalTop] = a - b; break;
                case '*': evalStack[++evalTop] = a * b; break;
                case '/': evalStack[++evalTop] = a / b; break;
            }
        }
    }
    return evalStack[evalTop];
}

int main() {
    char exp[MAX];
    printf("Enter infix expression: ");
    gets(exp);
    infixToPostfix(exp);
    infixToPrefix(exp);
    printf("Enter postfix expression for evaluation: ");
    gets(exp);
    printf("Evaluation result: %d\n", evaluatePostfix(exp));
    return 0;
}
